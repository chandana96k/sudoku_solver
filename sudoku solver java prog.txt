class Solution {
    public static void main(String[] args) {
        char[][] board ={                    //unsolved sudoku board('.' for empty cell)
            {'.','7','.','.','2','.','.','4','6'},
            {'.','6','.','.','.','.','8','9','.'},
            {'2','.','.','8','.','.','7','1','5'},
            {'.','8','4','.','9','7','.','.','.'},
            {'7','1','.','.','.','.','.','5','9'},
            {'.','.','.','1','3','.','4','8','.'},
            {'6','9','7','.','.','2','.','.','8'},
            {'.','5','8','.','.','.','.','6','.'},
            {'4','3','.','.','8','.','.','7','.'}
        };
        
        print(board);
        Solution solution = new Solution();  //object creation
        if (solution.solve(board)) {
            System.out.println("Solved successfully!");
        }
        else{
            System.out.println("Unsolvable board :(");
        }
        print(board);
        
    }
    
    public static void print(char[][] board){
            for(int i=0;i<9;i++){
                for(int j=0;j<9;j++){
                    System.out.print(board[i][j]);
                }
                System.out.println();
            }
    }
    
    boolean solve(char[][] board){
        for(int i=0;i<board.length;i++){   //iterrating through each row
            for(int j=0;j<board[0].length;j++){   //iterrating through each column
                if(board[i][j] == '.'){    //check if the cell is empty
                    for(char c='1'; c<='9';c++){  
                        if(isValid(board,i,j,c)){  //check if the numbers from 1 to 9 can be added to the board
                            board[i][j] = c;
                            if(solve(board)==true)  //returns true if the number can be inserted
                                return true;
                            else
                                board[i][j]='.';  //if the number doesnt provide valid sudoku solution, the cell will be again emptied
                        }
                    }
                    return false;

                }
            }
        }
        return true;
    }

    boolean isValid(char[][] board, int row, int col, char c){
        for(int i=0; i<9; i++){
            if(board[i][col] == c) //checks if the column already has the number
                return false;
            if(board[row][i] == c) //checks if the row already has the number
                return false;
            if(board[3*(row/3) + i/3][3*(col/3) + i%3] == c) //checks if the 3x3 cell already has the number
                return false;
        }
        return true;
    }
}

other inputs:
            {'.','7','.','.','2','.','.','4','6'},
            {'.','6','.','.','.','.','8','9','.'},
            {'2','.','.','8','.','.','7','1','5'},
            {'.','8','4','.','9','7','.','.','.'},
            {'7','1','.','.','.','.','.','5','9'},
            {'.','.','.','1','3','.','4','8','.'},
            {'6','9','7','.','.','2','.','.','8'},
            {'.','5','8','.','.','.','.','6','.'},
            {'4','3','.','.','8','.','.','7','.'}

            {'5','3','.','.','7','.','.','.','.'},
            {'6','.','.','1','9','5','.','.','.'},
            {'.','9','8','.','.','.','.','6','.'},
            {'8','.','.','.','6','.','.','.','3'},
            {'4','.','.','8','.','3','.','.','1'},
            {'7','.','.','.','2','.','.','.','6'},
            {'.','6','.','.','.','.','2','8','.'},
            {'.','.','.','4','1','9','.','.','5'},
            {'.','.','.','.','8','.','.','7','9'}

            {'8','.','6','.','1','.','.','.','.'},
            {'.','.','3','.','6','4','.','9','.'},
            {'9','.','.','.','.','.','8','1','6'},
            {'.','8','.','3','9','6','.','.','.'},
            {'7','.','2','.','4','.','3','.','9'},
            {'.','.','.','5','7','2','.','8','.'},
            {'5','2','1','.','.','.','.','.','4'},
            {'.','3','.','7','5','.','2','.','.'},
            {'.','.','.','.','2','.','1','.','5'}
